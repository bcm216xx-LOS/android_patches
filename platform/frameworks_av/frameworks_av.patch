From aacaf1bb3679bd0de6c82a952334d6679f00aba2 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 24 Apr 2013 11:37:19 +0700
Subject: [PATCH 1/9] OMXCodec: Re-implement requires-flush-before-shutdown
 quirk

Support is already there, but is not in the codec quirk reading list.
Re-implement it as required by Broadcom's OMX

Change-Id: I225c269029d63b628b1eb01f7b65c1317f0458b2
---
 media/libstagefright/OMXCodec.cpp | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 58372ed..68ffc35 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -260,6 +260,9 @@ uint32_t OMXCodec::getComponentQuirks(
     if (info->hasQuirk("output-buffers-are-unreadable")) {
         quirks |= kOutputBuffersAreUnreadable;
     }
+    if (info->hasQuirk("requires-flush-before-shutdown")) {
+    quirks |= kRequiresFlushBeforeShutdown;
+    }
 
     return quirks;
 }
-- 
2.3.2 (Apple Git-55)


From 3dff91d1327ea328ddcd967a3d9432786695f7fc Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Tue, 17 Dec 2013 13:15:52 +0700
Subject: [PATCH 2/9] OMXCodec: set default input buffer size

Broadcom OMX only set the buffer size to 65536 by default which
is not enough for higher bitrate video

(This patch has been adapted for Lollipop)

Change-Id: I93f8fed2d2073c13cb00a231b1fc2454620d90ad
---
 media/libstagefright/ACodec.cpp   | 13 +++++++++++++
 media/libstagefright/OMXCodec.cpp | 12 ++++++++++++
 2 files changed, 25 insertions(+)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 0f9e505..a315cc1 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -1680,6 +1680,19 @@ status_t ACodec::configureCodec(
     } else if (!strcmp("OMX.Nvidia.aac.decoder", mComponentName.c_str())) {
         err = setMinBufferSize(kPortIndexInput, 8192);  // XXX
     }
+// Rhea's OMX fail to set a reasonable default size from width and height
+#ifdef RHEA_HWC
+    else if (!strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.decoder.", 21)) {
+        int32_t width;
+        int32_t height;
+        if (msg->findInt32("width", &width) && msg->findInt32("height", &height)) {
+            setMinBufferSize(kPortIndexInput, (width * height * 3) / 2);
+        } else {
+            ALOGE("Failed to set min buffer size");
+        }
+    }
+#endif
+
 
     mBaseOutputFormat = outputFormat;
 
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 68ffc35..a182f09 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -664,6 +664,18 @@ status_t OMXCodec::configureCodec(const sp<MetaData> &meta) {
     if (meta->findInt32(kKeyMaxInputSize, &maxInputSize)) {
         setMinBufferSize(kPortIndexInput, (OMX_U32)maxInputSize);
     }
+// Capri's OMX fail to set a reasonable default size from width and height
+#ifdef RHEA_HWC
+    else if (!strncmp(mComponentName, "OMX.BRCM.vc4.decoder.", 21)) {
+        int32_t width;
+        int32_t height;
+        if (meta->findInt32(kKeyWidth, &width) && meta->findInt32(kKeyHeight, &height)) {
+            setMinBufferSize(kPortIndexInput, (width * height * 3) / 2);
+        } else {
+            ALOGE("Failed to set min buffer size");
+        }
+    }
+#endif
 
     initOutputFormat(meta);
 
-- 
2.3.2 (Apple Git-55)


From 466a2e77e547c3be26be0b5339b5963a498e0bd9 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 19 Nov 2014 20:33:58 +0700
Subject: [PATCH 3/9] ACodec: skip port index checking on vc4 encoder

Change-Id: I1ac7dd3fd97afaebac8c697e4bd7ef77dac2939a
---
 media/libstagefright/ACodec.cpp | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index a315cc1..268b975 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -3471,6 +3471,11 @@ status_t ACodec::getPortFormat(OMX_U32 portIndex, sp<AMessage> &notify) {
                 mNode, OMX_IndexParamPortDefinition, &def, sizeof(def)),
              (status_t)OK);
 
+#ifdef RHEA_HWC
+    if (strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.encoder.", 21) != 0)
+        // Skip checking on vc4 encoder. It will return the incorrect
+        // port index, but correct parameters.
+#endif
     CHECK_EQ((int)def.eDir,
             (int)(portIndex == kPortIndexOutput ? OMX_DirOutput : OMX_DirInput));
 
-- 
2.3.2 (Apple Git-55)


From 65a1ec9800a0e90fbef01e69784640f41aaf46b4 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 23 Nov 2014 17:27:20 +0700
Subject: [PATCH 4/9] ACodec: Don't trust provided width/height when setting
 input buffer size

They are bogus

Change-Id: I666bd0a1339d00bfa26b5b9c3d4aaa3499f4fd33
---
 media/libstagefright/ACodec.cpp | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 268b975..160def2 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -1683,13 +1683,9 @@ status_t ACodec::configureCodec(
 // Rhea's OMX fail to set a reasonable default size from width and height
 #ifdef RHEA_HWC
     else if (!strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.decoder.", 21)) {
-        int32_t width;
-        int32_t height;
-        if (msg->findInt32("width", &width) && msg->findInt32("height", &height)) {
-            setMinBufferSize(kPortIndexInput, (width * height * 3) / 2);
-        } else {
-            ALOGE("Failed to set min buffer size");
-        }
+        // We cannot trust the width/height from the message
+        // so just use 480x320
+        setMinBufferSize(kPortIndexInput, (480 * 320 * 3) / 2);
     }
 #endif
 
-- 
2.3.2 (Apple Git-55)


From cd144785beba3fc8fbbed55877bdbdca9ba7f626 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Fri, 28 Nov 2014 21:07:59 +0700
Subject: [PATCH 5/9] AudioFlinger: i9082: HACK: disable stereo record

Stereo record causes audio to speed up x2 for some reason.
Record in mono and let AudioFlinger resample to stereo
(we only have one mic anyway)

Change-Id: I0c916c74b3a02f51a68cb8e899160889b152db42
---
 services/audioflinger/AudioFlinger.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 4be56e3..1a999ee 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -1995,6 +1995,12 @@ sp<AudioFlinger::RecordThread> AudioFlinger::openInput_l(audio_module_handle_t m
     audio_config_t halconfig = *config;
     audio_hw_device_t *inHwHal = inHwDev->hwDevice();
     audio_stream_in_t *inStream = NULL;
+    
+#ifdef RHEA_HWC
+    ALOGD("Forcing channel mask to mono on rhea");
+    halconfig.channel_mask = AUDIO_CHANNEL_IN_MONO;
+#endif
+
     status_t status = inHwHal->open_input_stream(inHwHal, *input, device, &halconfig,
                                         &inStream, flags, address.string(), source);
     ALOGV("openInput_l() openInputStream returned input %p, SamplingRate %d"
-- 
2.3.2 (Apple Git-55)


From c3512ea44f06c667a1dda218726b18027d4e7b58 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 10 Dec 2014 17:38:10 +0700
Subject: [PATCH 6/9] AudioFlinger: i9082: HACK: force audio to 48 KHz

Let surfaceflinger do all the resampling instead of the audio HAL

Don't know if it fixes anything, but worth a try

Change-Id: Idf61fe2d3ad560ef74f35ced32f09f49a8f61d5e
---
 services/audioflinger/AudioFlinger.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 1a999ee..fa623ad 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -1997,8 +1997,9 @@ sp<AudioFlinger::RecordThread> AudioFlinger::openInput_l(audio_module_handle_t m
     audio_stream_in_t *inStream = NULL;
     
 #ifdef RHEA_HWC
-    ALOGD("Forcing channel mask to mono on capri");
+    ALOGD("Forcing input to mono 48K on capri");
     halconfig.channel_mask = AUDIO_CHANNEL_IN_MONO;
+    halconfig.sample_rate = 48000;
 #endif
 
     status_t status = inHwHal->open_input_stream(inHwHal, *input, device, &halconfig,
-- 
2.3.2 (Apple Git-55)


From 17071cbba07190b405bc1c6684852423b5cf5a8a Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Tue, 16 Dec 2014 21:12:22 +0700
Subject: [PATCH 7/9] stagefright: i9082: don't allocate too many extra buffers

Too many extra buffers (for a total of 8) causes random
video freezes and freezes on rotation

Change-Id: Ia8600f9ce3cb2d6f14144c0cd6c554a12cd34aa5
---
 media/libstagefright/ACodec.cpp   | 6 +++++-
 media/libstagefright/OMXCodec.cpp | 6 +++++-
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 160def2..073f66f 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -759,7 +759,11 @@ status_t ACodec::configureOutputBuffersFromNativeWindow(
     // This check was present in KitKat.
     if (def.nBufferCountActual < def.nBufferCountMin + *minUndequeuedBuffers) {
 #endif
-    for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
+#ifdef RHEA_HWC
+    for (OMX_U32 extraBuffers = 1; /* condition inside loop */; extraBuffers--) {
+#else
+     for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
+#endif
         OMX_U32 newBufferCount =
             def.nBufferCountMin + *minUndequeuedBuffers + extraBuffers;
         def.nBufferCountActual = newBufferCount;
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index a182f09..68690b4 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -1920,7 +1920,11 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
     // This check was present in KitKat.
     if (def.nBufferCountActual < def.nBufferCountMin + minUndequeuedBufs) {
 #endif
-    for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
+#ifdef RHEA_HWC
++    for (OMX_U32 extraBuffers = 1; /* condition inside loop */; extraBuffers--) {
+#else
+     for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
+#endif
         OMX_U32 newBufferCount =
             def.nBufferCountMin + minUndequeuedBufs + extraBuffers;
         def.nBufferCountActual = newBufferCount;
-- 
2.3.2 (Apple Git-55)


From 45fb4ec21a6f02abfbeed4ed34fadd382b891d17 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sat, 20 Dec 2014 19:09:59 +0700
Subject: [PATCH 8/9] stagefright: RHEA_HWC: fix for screen recording

Change-Id: I6193a4403462fc43bb71cb6a4c03b855c37569dc
---
 media/libstagefright/omx/GraphicBufferSource.cpp | 2 ++
 media/libstagefright/omx/OMXNodeInstance.cpp     | 7 +++++++
 2 files changed, 9 insertions(+)

diff --git a/media/libstagefright/omx/GraphicBufferSource.cpp b/media/libstagefright/omx/GraphicBufferSource.cpp
index 44c7edc..7d1735e 100644
--- a/media/libstagefright/omx/GraphicBufferSource.cpp
+++ b/media/libstagefright/omx/GraphicBufferSource.cpp
@@ -269,12 +269,14 @@ void GraphicBufferSource::codecBufferEmptied(OMX_BUFFERHEADERTYPE* header) {
         } else if (type == kMetadataBufferTypeGraphicBuffer) {
             GraphicBuffer *buffer;
             memcpy(&buffer, data + 4, sizeof(buffer));
+#ifndef RHEA_HWC
             if (buffer != codecBuffer.mGraphicBuffer.get()) {
                 // should never happen
                 ALOGE("codecBufferEmptied: buffer is %p, expected %p",
                         buffer, codecBuffer.mGraphicBuffer.get());
                 CHECK(!"codecBufferEmptied: mismatched buffer");
             }
+#endif
         }
     }
 
diff --git a/media/libstagefright/omx/OMXNodeInstance.cpp b/media/libstagefright/omx/OMXNodeInstance.cpp
index c04d95f..4585174 100644
--- a/media/libstagefright/omx/OMXNodeInstance.cpp
+++ b/media/libstagefright/omx/OMXNodeInstance.cpp
@@ -821,10 +821,17 @@ status_t OMXNodeInstance::createInputSurface(
     }
 
     if (def.format.video.eColorFormat != OMX_COLOR_FormatAndroidOpaque) {
+#ifdef RHEA_HWC
+        // VC Encoder change OMX_COLOR_FormatAndroidOpaque to 0x7F000005
+        if (def.format.video.eColorFormat != 0x7F000005) {
+#endif
         CLOGW("createInputSurface requires COLOR_FormatSurface "
                 "(AndroidOpaque) color format instead of %s(%#x)",
                 asString(def.format.video.eColorFormat), def.format.video.eColorFormat);
         return INVALID_OPERATION;
+#ifdef RHEA_HWC
+        }
+#endif
     }
 
     GraphicBufferSource* bufferSource = new GraphicBufferSource(
-- 
2.3.2 (Apple Git-55)


From 906b861985f0d7c910b6e33038f72a29b3d715d8 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 21 Dec 2014 15:25:33 +0700
Subject: [PATCH 9/9] stagefright: RHEA_HWC: fix for miracast

Our encoder does not support OMX_Video_ControlRateConstant

Change-Id: If5716641f7cc293e2cfc4d956e3cc1323e4ad046
---
 media/libstagefright/ACodec.cpp | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 073f66f..5a2cd6e 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -2627,7 +2627,13 @@ static OMX_U32 setPFramesSpacing(int32_t iFramesInterval, int32_t frameRate) {
     return ret;
 }
 
-static OMX_VIDEO_CONTROLRATETYPE getBitrateMode(const sp<AMessage> &msg) {
+static OMX_VIDEO_CONTROLRATETYPE getBitrateMode(const sp<AMessage> &msg, const AString &name) {
+#ifdef RHEA_HWC
+    // vc4 encoder only supports VBR
+    if (strncmp(name.c_str(), "OMX.BRCM.vc4.encoder.", 21) == 0) {
+        return OMX_Video_ControlRateVariable;
+    }
+#endif
     int32_t tmp;
     if (!msg->findInt32("bitrate-mode", &tmp)) {
         return OMX_Video_ControlRateVariable;
@@ -2643,7 +2649,7 @@ status_t ACodec::setupMPEG4EncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);;
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -2724,7 +2730,7 @@ status_t ACodec::setupH263EncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -2852,7 +2858,7 @@ status_t ACodec::setupAVCEncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OOMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -2960,7 +2966,7 @@ status_t ACodec::setupHEVCEncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -3027,7 +3033,7 @@ status_t ACodec::setupVPXEncoderParameters(const sp<AMessage> &msg) {
     }
     msg->findInt32("i-frame-interval", &iFrameInterval);
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
-- 
2.3.2 (Apple Git-55)

